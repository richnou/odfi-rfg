

/* auto generated by RFG */
/* address map
TestRAM: 0x100

*/
/* instantiation template
ramRF ramRF_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.TestRAM_addr(),
	.TestRAM_ren(),
	.TestRAM_rdata(),
	.TestRAM_wen(),
	.TestRAM_wdata()

);
*/
module ramRF
(
	///\defgroup sys
	///@{
	input wire res_n,
	input wire clk,
	///}@
	///\defgroup rw_if
	///@{
	input wire[8:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@
	input wire[4:0] TestRAM_addr,
	input wire TestRAM_ren,
	output wire[15:0] TestRAM_rdata,
	input wire TestRAM_wen,
	input wire[15:0] TestRAM_wdata
);

	reg[4:0] TestRAM_rf_addr;
	reg TestRAM_rf_ren;
	wire[15:0] TestRAM_rf_rdata;
	reg TestRAM_rf_wen;
	reg[15:0] TestRAM_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;

	ram_2rw_1c #(
		.DATASIZE(16),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) buffer_data_I (
		.clk(clk),
		.wen_a(TestRAM_rf_wen),
		.ren_a(TestRAM_rf_ren),
		.addr_a(TestRAM_rf_addr),
		.wdata_a(TestRAM_rf_wdata),
		.rdata_a(TestRAM_rf_rdata),
		.wen_b(TestRAM_wen),
		.ren_b(TestRAM_ren),
		.addr_b(TestRAM_addr),
		.wdata_b(TestRAM_wdata),
		.rdata_b(TestRAM_rdata)
	);


	/* RamBlock TestRAM */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			TestRAM_rf_addr <= 5'b0;
			TestRAM_rf_wdata  <= 16'b0;
			`endif
			TestRAM_rf_wen <= 1'b0;
			TestRAM_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[8:8] == 1)
			begin
				TestRAM_rf_addr <= address[8:3];
				TestRAM_rf_wdata <= write_data[15:0];
				TestRAM_rf_wen <= write_en;
				TestRAM_rf_ren <= read_en;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif
			read_en_dly0 <= 1'b0;
			read_en_dly1 <= 1'b0;
			read_en_dly2 <= 1'b0;
		end
		else
		begin
			read_en_dly0 <= read_en;
			read_en_dly1 <= read_en_dly0;
			read_en_dly2 <= read_en_dly1;

			casex(address[8:3])
				{1'h1,5'bxxxxx}:
				begin
					read_data[15:0] <= TestRAM_rf_rdata;
					read_data[63:16] <= 48'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end
			endcase
		end
	end
endmodule