

/* auto generated by RFG */
/* address map
RAM: base: 0x0 size: 256
RAM2: base: 0x100 size: 256
RAM3: base: 0x200 size: 256

*/
/* instantiation template
absAddrRAM absAddrRAM_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.RAM_addr(),
	.RAM_ren(),
	.RAM_rdata(),
	.RAM_wen(),
	.RAM_wdata(),
	.RAM2_addr(),
	.RAM2_ren(),
	.RAM2_rdata(),
	.RAM2_wen(),
	.RAM2_wdata(),
	.RAM3_addr(),
	.RAM3_ren(),
	.RAM3_rdata(),
	.RAM3_wen(),
	.RAM3_wdata()
);
*/
module absAddrRAM
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[9:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@ 
	input wire[4:0] RAM_addr,
	input wire RAM_ren,
	output wire[15:0] RAM_rdata,
	input wire RAM_wen,
	input wire[15:0] RAM_wdata,
	input wire[4:0] RAM2_addr,
	input wire RAM2_ren,
	output wire[15:0] RAM2_rdata,
	input wire RAM2_wen,
	input wire[15:0] RAM2_wdata,
	input wire[4:0] RAM3_addr,
	input wire RAM3_ren,
	output wire[15:0] RAM3_rdata,
	input wire RAM3_wen,
	input wire[15:0] RAM3_wdata

);

	reg[4:0] RAM_rf_addr;
	reg RAM_rf_ren;
	wire[15:0] RAM_rf_rdata;
	reg RAM_rf_wen;
	reg[15:0] RAM_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;
	reg[4:0] RAM2_rf_addr;
	reg RAM2_rf_ren;
	wire[15:0] RAM2_rf_rdata;
	reg RAM2_rf_wen;
	reg[15:0] RAM2_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;
	reg[4:0] RAM3_rf_addr;
	reg RAM3_rf_ren;
	wire[15:0] RAM3_rf_rdata;
	reg RAM3_rf_wen;
	reg[15:0] RAM3_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;

	ram_2rw_1c #(
		.DATASIZE(16),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) RAM (
		.clk(clk),
		.wen_a(RAM_rf_wen),
		.ren_a(RAM_rf_ren),
		.addr_a(RAM_rf_addr),
		.wdata_a(RAM_rf_wdata),
		.rdata_a(RAM_rf_rdata),
		.wen_b(RAM_wen),
		.ren_b(RAM_ren),
		.addr_b(RAM_addr),
		.wdata_b(RAM_wdata),
		.rdata_b(RAM_rdata)
	);

	ram_2rw_1c #(
		.DATASIZE(16),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) RAM2 (
		.clk(clk),
		.wen_a(RAM2_rf_wen),
		.ren_a(RAM2_rf_ren),
		.addr_a(RAM2_rf_addr),
		.wdata_a(RAM2_rf_wdata),
		.rdata_a(RAM2_rf_rdata),
		.wen_b(RAM2_wen),
		.ren_b(RAM2_ren),
		.addr_b(RAM2_addr),
		.wdata_b(RAM2_wdata),
		.rdata_b(RAM2_rdata)
	);

	ram_2rw_1c #(
		.DATASIZE(16),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) RAM3 (
		.clk(clk),
		.wen_a(RAM3_rf_wen),
		.ren_a(RAM3_rf_ren),
		.addr_a(RAM3_rf_addr),
		.wdata_a(RAM3_rf_wdata),
		.rdata_a(RAM3_rf_rdata),
		.wen_b(RAM3_wen),
		.ren_b(RAM3_ren),
		.addr_b(RAM3_addr),
		.wdata_b(RAM3_wdata),
		.rdata_b(RAM3_rdata)
	);


	/* RamBlock RAM */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			RAM_rf_addr <= 5'b0;
			RAM_rf_wdata  <= 16'b0;
			`endif
			RAM_rf_wen <= 1'b0;
			RAM_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 0)
			begin
				RAM_rf_addr <= address[7:3];
				RAM_rf_wdata <= write_data[15:0];
				RAM_rf_wen <= write_en;
				RAM_rf_ren <= read_en;
			end
		end
	end

	/* RamBlock RAM2 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			RAM2_rf_addr <= 5'b0;
			RAM2_rf_wdata  <= 16'b0;
			`endif
			RAM2_rf_wen <= 1'b0;
			RAM2_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 1)
			begin
				RAM2_rf_addr <= address[7:3];
				RAM2_rf_wdata <= write_data[15:0];
				RAM2_rf_wen <= write_en;
				RAM2_rf_ren <= read_en;
			end
		end
	end

	/* RamBlock RAM3 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			RAM3_rf_addr <= 5'b0;
			RAM3_rf_wdata  <= 16'b0;
			`endif
			RAM3_rf_wen <= 1'b0;
			RAM3_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 2)
			begin
				RAM3_rf_addr <= address[7:3];
				RAM3_rf_wdata <= write_data[15:0];
				RAM3_rf_wen <= write_en;
				RAM3_rf_ren <= read_en;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif

			read_en_dly0 <= 1'b0;
			read_en_dly1 <= 1'b0;
			read_en_dly2 <= 1'b0;
		end
		else
		begin
			read_en_dly0 <= read_en;
			read_en_dly1 <= read_en_dly0;
			read_en_dly2 <= read_en_dly1;

			casex(address[9:3])
				{2'h0,5'bxxxxx}:
				begin
					read_data[15:0] <= RAM_rf_rdata;
					read_data[63:16] <= 48'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				{2'h1,5'bxxxxx}:
				begin
					read_data[15:0] <= RAM2_rf_rdata;
					read_data[63:16] <= 48'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				{2'h2,5'bxxxxx}:
				begin
					read_data[15:0] <= RAM3_rf_rdata;
					read_data[63:16] <= 48'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule