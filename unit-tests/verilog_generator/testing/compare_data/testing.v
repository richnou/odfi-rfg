

/* auto generated by RFG */
/* address map
g2_r3: base: 0x0 size: 8
g2_r4: base: 0x8 size: 8
g2_buffer1: base: 0x100 size: 256
g2_buffer2: base: 0x200 size: 256
g2_buffer3: base: 0x300 size: 256

*/
/* instantiation template
testing testing_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.g2_r3_f1_next(),
	.g2_r3_f1(),
	.g2_r4_f1_next(),
	.g2_r4_f1(),
	.g2_buffer1_addr(),
	.g2_buffer1_ren(),
	.g2_buffer1_rdata(),
	.g2_buffer1_wen(),
	.g2_buffer1_wdata(),
	.g2_buffer2_addr(),
	.g2_buffer2_ren(),
	.g2_buffer2_rdata(),
	.g2_buffer2_wen(),
	.g2_buffer2_wdata(),
	.g2_buffer3_addr(),
	.g2_buffer3_ren(),
	.g2_buffer3_rdata(),
	.g2_buffer3_wen(),
	.g2_buffer3_wdata()

);
*/
module testing
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[9:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@ 
	input wire[63:0] g2_r3_f1_next,
	output reg[63:0] g2_r3_f1,
	input wire[63:0] g2_r4_f1_next,
	output reg[63:0] g2_r4_f1,
	input wire[4:0] g2_buffer1_addr,
	input wire g2_buffer1_ren,
	output wire[63:0] g2_buffer1_rdata,
	input wire g2_buffer1_wen,
	input wire[63:0] g2_buffer1_wdata,
	input wire[4:0] g2_buffer2_addr,
	input wire g2_buffer2_ren,
	output wire[63:0] g2_buffer2_rdata,
	input wire g2_buffer2_wen,
	input wire[63:0] g2_buffer2_wdata,
	input wire[4:0] g2_buffer3_addr,
	input wire g2_buffer3_ren,
	output wire[63:0] g2_buffer3_rdata,
	input wire g2_buffer3_wen,
	input wire[63:0] g2_buffer3_wdata


);

	reg[4:0] g2_buffer1_rf_addr;
	reg g2_buffer1_rf_ren;
	wire[63:0] g2_buffer1_rf_rdata;
	reg g2_buffer1_rf_wen;
	reg[63:0] g2_buffer1_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;
	reg[4:0] g2_buffer2_rf_addr;
	reg g2_buffer2_rf_ren;
	wire[63:0] g2_buffer2_rf_rdata;
	reg g2_buffer2_rf_wen;
	reg[63:0] g2_buffer2_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;
	reg[4:0] g2_buffer3_rf_addr;
	reg g2_buffer3_rf_ren;
	wire[63:0] g2_buffer3_rf_rdata;
	reg g2_buffer3_rf_wen;
	reg[63:0] g2_buffer3_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;

	ram_2rw_1c #(
		.DATASIZE(64),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) g2_buffer1 (
		.clk(clk),
		.wen_a(g2_buffer1_rf_wen),
		.ren_a(g2_buffer1_rf_ren),
		.addr_a(g2_buffer1_rf_addr),
		.wdata_a(g2_buffer1_rf_wdata),
		.rdata_a(g2_buffer1_rf_rdata),
		.wen_b(g2_buffer1_wen),
		.ren_b(g2_buffer1_ren),
		.addr_b(g2_buffer1_addr),
		.wdata_b(g2_buffer1_wdata),
		.rdata_b(g2_buffer1_rdata)
	);

	ram_2rw_1c #(
		.DATASIZE(64),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) g2_buffer2 (
		.clk(clk),
		.wen_a(g2_buffer2_rf_wen),
		.ren_a(g2_buffer2_rf_ren),
		.addr_a(g2_buffer2_rf_addr),
		.wdata_a(g2_buffer2_rf_wdata),
		.rdata_a(g2_buffer2_rf_rdata),
		.wen_b(g2_buffer2_wen),
		.ren_b(g2_buffer2_ren),
		.addr_b(g2_buffer2_addr),
		.wdata_b(g2_buffer2_wdata),
		.rdata_b(g2_buffer2_rdata)
	);

	ram_2rw_1c #(
		.DATASIZE(64),
		.ADDRSIZE(5),
		.PIPELINED(0)
	) g2_buffer3 (
		.clk(clk),
		.wen_a(g2_buffer3_rf_wen),
		.ren_a(g2_buffer3_rf_ren),
		.addr_a(g2_buffer3_rf_addr),
		.wdata_a(g2_buffer3_rf_wdata),
		.rdata_a(g2_buffer3_rf_rdata),
		.wen_b(g2_buffer3_wen),
		.ren_b(g2_buffer3_ren),
		.addr_b(g2_buffer3_addr),
		.wdata_b(g2_buffer3_wdata),
		.rdata_b(g2_buffer3_rdata)
	);


	/* register r3 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			g2_r3_f1 <= 0;
		end
		else
		begin

			if((address[9:3]== 0) && write_en)
			begin
				g2_r3_f1 <= write_data[63:0];
			end
			else
			begin
				g2_r3_f1 <= g2_r3_f1_next;
			end
		end
	end

	/* register r4 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			g2_r4_f1 <= 0;
		end
		else
		begin

			if((address[9:3]== 1) && write_en)
			begin
				g2_r4_f1 <= write_data[63:0];
			end
			else
			begin
				g2_r4_f1 <= g2_r4_f1_next;
			end
		end
	end

	/* RamBlock g2_buffer1 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			g2_buffer1_rf_addr <= 5'b0;
			g2_buffer1_rf_wdata  <= 64'b0;
			`endif
			g2_buffer1_rf_wen <= 1'b0;
			g2_buffer1_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 1)
			begin
				g2_buffer1_rf_addr <= address[7:3];
				g2_buffer1_rf_wdata <= write_data[15:0];
				g2_buffer1_rf_wen <= write_en;
				g2_buffer1_rf_ren <= read_en;
			end
		end
	end

	/* RamBlock g2_buffer2 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			g2_buffer2_rf_addr <= 5'b0;
			g2_buffer2_rf_wdata  <= 64'b0;
			`endif
			g2_buffer2_rf_wen <= 1'b0;
			g2_buffer2_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 2)
			begin
				g2_buffer2_rf_addr <= address[7:3];
				g2_buffer2_rf_wdata <= write_data[15:0];
				g2_buffer2_rf_wen <= write_en;
				g2_buffer2_rf_ren <= read_en;
			end
		end
	end

	/* RamBlock g2_buffer3 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			g2_buffer3_rf_addr <= 5'b0;
			g2_buffer3_rf_wdata  <= 64'b0;
			`endif
			g2_buffer3_rf_wen <= 1'b0;
			g2_buffer3_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[9:8] == 3)
			begin
				g2_buffer3_rf_addr <= address[7:3];
				g2_buffer3_rf_wdata <= write_data[15:0];
				g2_buffer3_rf_wen <= write_en;
				g2_buffer3_rf_ren <= read_en;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif

			read_en_dly0 <= 1'b0;
			read_en_dly1 <= 1'b0;
			read_en_dly2 <= 1'b0;
		end
		else
		begin
			read_en_dly0 <= read_en;
			read_en_dly1 <= read_en_dly0;
			read_en_dly2 <= read_en_dly1;

			casex(address[9:3])
				7'h0:
				begin
					read_data[63:0] <= g2_r3_f1;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				7'h1:
				begin
					read_data[63:0] <= g2_r4_f1;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				{2'h1,5'bxxxxx}:
				begin
					read_data[63:0] <= g2_buffer1_rf_rdata;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				{2'h2,6'bxxxxx}:
				begin
					read_data[63:0] <= g2_buffer2_rf_rdata;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				{2'h3,7'bxxxxx}:
				begin
					read_data[63:0] <= g2_buffer3_rf_rdata;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule