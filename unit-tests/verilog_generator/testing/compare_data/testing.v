

/* auto generated by RFG */
/* address map
info_Group_info_register: base: 0x0 size: 8
GPR_Group_GPR_0: base: 0x100 size: 8
GPR_Group_GPR_1: base: 0x108 size: 8
GPR_Group_GPR_2: base: 0x110 size: 8
GPR_Group_GPR_3: base: 0x118 size: 8
GPR_Group_GPR_4: base: 0x120 size: 8
GPR_Group_GPR_5: base: 0x128 size: 8
GPR_Group_GPR_6: base: 0x130 size: 8
GPR_Group_GPR_7: base: 0x138 size: 8
GPR_Group_GPR_8: base: 0x140 size: 8
GPR_Group_GPR_9: base: 0x148 size: 8
GPR_Group_GPR_10: base: 0x150 size: 8
GPR_Group_GPR_11: base: 0x158 size: 8
GPR_Group_GPR_12: base: 0x160 size: 8
GPR_Group_GPR_13: base: 0x168 size: 8
GPR_Group_GPR_14: base: 0x170 size: 8
GPR_Group_GPR_15: base: 0x178 size: 8
RAM_Group_RAM: base: 0x980 size: 2048

*/
/* instantiation template
RF RF_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.info_Group_info_register_GUID_next(),
	.GPR_Group_GPR_0_GPF_next(),
	.GPR_Group_GPR_0_GPF(),
	.GPR_Group_GPR_0_GPF_wen(),
	.GPR_Group_GPR_0_GPF_written(),
	.GPR_Group_GPR_1_GPF_next(),
	.GPR_Group_GPR_1_GPF(),
	.GPR_Group_GPR_1_GPF_wen(),
	.GPR_Group_GPR_1_GPF_written(),
	.GPR_Group_GPR_2_GPF_next(),
	.GPR_Group_GPR_2_GPF(),
	.GPR_Group_GPR_2_GPF_wen(),
	.GPR_Group_GPR_2_GPF_written(),
	.GPR_Group_GPR_3_GPF_next(),
	.GPR_Group_GPR_3_GPF(),
	.GPR_Group_GPR_3_GPF_wen(),
	.GPR_Group_GPR_3_GPF_written(),
	.GPR_Group_GPR_4_GPF_next(),
	.GPR_Group_GPR_4_GPF(),
	.GPR_Group_GPR_4_GPF_wen(),
	.GPR_Group_GPR_4_GPF_written(),
	.GPR_Group_GPR_5_GPF_next(),
	.GPR_Group_GPR_5_GPF(),
	.GPR_Group_GPR_5_GPF_wen(),
	.GPR_Group_GPR_5_GPF_written(),
	.GPR_Group_GPR_6_GPF_next(),
	.GPR_Group_GPR_6_GPF(),
	.GPR_Group_GPR_6_GPF_wen(),
	.GPR_Group_GPR_6_GPF_written(),
	.GPR_Group_GPR_7_GPF_next(),
	.GPR_Group_GPR_7_GPF(),
	.GPR_Group_GPR_7_GPF_wen(),
	.GPR_Group_GPR_7_GPF_written(),
	.GPR_Group_GPR_8_GPF_next(),
	.GPR_Group_GPR_8_GPF(),
	.GPR_Group_GPR_8_GPF_wen(),
	.GPR_Group_GPR_8_GPF_written(),
	.GPR_Group_GPR_9_GPF_next(),
	.GPR_Group_GPR_9_GPF(),
	.GPR_Group_GPR_9_GPF_wen(),
	.GPR_Group_GPR_9_GPF_written(),
	.GPR_Group_GPR_10_GPF_next(),
	.GPR_Group_GPR_10_GPF(),
	.GPR_Group_GPR_10_GPF_wen(),
	.GPR_Group_GPR_10_GPF_written(),
	.GPR_Group_GPR_11_GPF_next(),
	.GPR_Group_GPR_11_GPF(),
	.GPR_Group_GPR_11_GPF_wen(),
	.GPR_Group_GPR_11_GPF_written(),
	.GPR_Group_GPR_12_GPF_next(),
	.GPR_Group_GPR_12_GPF(),
	.GPR_Group_GPR_12_GPF_wen(),
	.GPR_Group_GPR_12_GPF_written(),
	.GPR_Group_GPR_13_GPF_next(),
	.GPR_Group_GPR_13_GPF(),
	.GPR_Group_GPR_13_GPF_wen(),
	.GPR_Group_GPR_13_GPF_written(),
	.GPR_Group_GPR_14_GPF_next(),
	.GPR_Group_GPR_14_GPF(),
	.GPR_Group_GPR_14_GPF_wen(),
	.GPR_Group_GPR_14_GPF_written(),
	.GPR_Group_GPR_15_GPF_next(),
	.GPR_Group_GPR_15_GPF(),
	.GPR_Group_GPR_15_GPF_wen(),
	.GPR_Group_GPR_15_GPF_written(),
	.RAM_Group_RAM_addr(),
	.RAM_Group_RAM_ren(),
	.RAM_Group_RAM_rdata(),
	.RAM_Group_RAM_wen(),
	.RAM_Group_RAM_wdata()
 );
*/
module RF
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[12:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@ 
 	input wire[31:0] info_Group_info_register_GUID_next,
	input wire[63:0] GPR_Group_GPR_0_GPF_next,
	output reg[63:0] GPR_Group_GPR_0_GPF,
	input wire GPR_Group_GPR_0_GPF_wen,
	output reg GPR_Group_GPR_0_GPF_written,
	input wire[63:0] GPR_Group_GPR_1_GPF_next,
	output reg[63:0] GPR_Group_GPR_1_GPF,
	input wire GPR_Group_GPR_1_GPF_wen,
	output reg GPR_Group_GPR_1_GPF_written,
	input wire[63:0] GPR_Group_GPR_2_GPF_next,
	output reg[63:0] GPR_Group_GPR_2_GPF,
	input wire GPR_Group_GPR_2_GPF_wen,
	output reg GPR_Group_GPR_2_GPF_written,
	input wire[63:0] GPR_Group_GPR_3_GPF_next,
	output reg[63:0] GPR_Group_GPR_3_GPF,
	input wire GPR_Group_GPR_3_GPF_wen,
	output reg GPR_Group_GPR_3_GPF_written,
	input wire[63:0] GPR_Group_GPR_4_GPF_next,
	output reg[63:0] GPR_Group_GPR_4_GPF,
	input wire GPR_Group_GPR_4_GPF_wen,
	output reg GPR_Group_GPR_4_GPF_written,
	input wire[63:0] GPR_Group_GPR_5_GPF_next,
	output reg[63:0] GPR_Group_GPR_5_GPF,
	input wire GPR_Group_GPR_5_GPF_wen,
	output reg GPR_Group_GPR_5_GPF_written,
	input wire[63:0] GPR_Group_GPR_6_GPF_next,
	output reg[63:0] GPR_Group_GPR_6_GPF,
	input wire GPR_Group_GPR_6_GPF_wen,
	output reg GPR_Group_GPR_6_GPF_written,
	input wire[63:0] GPR_Group_GPR_7_GPF_next,
	output reg[63:0] GPR_Group_GPR_7_GPF,
	input wire GPR_Group_GPR_7_GPF_wen,
	output reg GPR_Group_GPR_7_GPF_written,
	input wire[63:0] GPR_Group_GPR_8_GPF_next,
	output reg[63:0] GPR_Group_GPR_8_GPF,
	input wire GPR_Group_GPR_8_GPF_wen,
	output reg GPR_Group_GPR_8_GPF_written,
	input wire[63:0] GPR_Group_GPR_9_GPF_next,
	output reg[63:0] GPR_Group_GPR_9_GPF,
	input wire GPR_Group_GPR_9_GPF_wen,
	output reg GPR_Group_GPR_9_GPF_written,
	input wire[63:0] GPR_Group_GPR_10_GPF_next,
	output reg[63:0] GPR_Group_GPR_10_GPF,
	input wire GPR_Group_GPR_10_GPF_wen,
	output reg GPR_Group_GPR_10_GPF_written,
	input wire[63:0] GPR_Group_GPR_11_GPF_next,
	output reg[63:0] GPR_Group_GPR_11_GPF,
	input wire GPR_Group_GPR_11_GPF_wen,
	output reg GPR_Group_GPR_11_GPF_written,
	input wire[63:0] GPR_Group_GPR_12_GPF_next,
	output reg[63:0] GPR_Group_GPR_12_GPF,
	input wire GPR_Group_GPR_12_GPF_wen,
	output reg GPR_Group_GPR_12_GPF_written,
	input wire[63:0] GPR_Group_GPR_13_GPF_next,
	output reg[63:0] GPR_Group_GPR_13_GPF,
	input wire GPR_Group_GPR_13_GPF_wen,
	output reg GPR_Group_GPR_13_GPF_written,
	input wire[63:0] GPR_Group_GPR_14_GPF_next,
	output reg[63:0] GPR_Group_GPR_14_GPF,
	input wire GPR_Group_GPR_14_GPF_wen,
	output reg GPR_Group_GPR_14_GPF_written,
	input wire[63:0] GPR_Group_GPR_15_GPF_next,
	output reg[63:0] GPR_Group_GPR_15_GPF,
	input wire GPR_Group_GPR_15_GPF_wen,
	output reg GPR_Group_GPR_15_GPF_written,
	input wire[7:0] RAM_Group_RAM_addr,
	input wire RAM_Group_RAM_ren,
	output wire[15:0] RAM_Group_RAM_rdata,
	input wire RAM_Group_RAM_wen,
	input wire[15:0] RAM_Group_RAM_wdata

);

	reg[31:0] info_Group_info_register_ID;
	reg[31:0] info_Group_info_register_GUID;
	reg[7:0] RAM_Group_RAM_rf_addr;
	reg RAM_Group_RAM_rf_ren;
	wire[15:0] RAM_Group_RAM_rf_rdata;
	reg RAM_Group_RAM_rf_wen;
	reg[15:0] RAM_Group_RAM_rf_wdata;
	reg read_en_dly0;
	reg read_en_dly1;
	reg read_en_dly2;

	ram_2rw_1c #(
		.DATASIZE(16),
		.ADDRSIZE(8),
		.PIPELINED(0)
	) RAM_Group_RAM (
		.clk(clk),
		.wen_a(RAM_Group_RAM_rf_wen),
		.ren_a(RAM_Group_RAM_rf_ren),
		.addr_a(RAM_Group_RAM_rf_addr),
		.wdata_a(RAM_Group_RAM_rf_wdata),
		.rdata_a(RAM_Group_RAM_rf_rdata),
		.wen_b(RAM_Group_RAM_wen),
		.ren_b(RAM_Group_RAM_ren),
		.addr_b(RAM_Group_RAM_addr),
		.wdata_b(RAM_Group_RAM_wdata),
		.rdata_b(RAM_Group_RAM_rdata)
	);


	/* register info_register */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			info_Group_info_register_ID <= 32'h12abcd;
			info_Group_info_register_GUID <= 32'h0;
		end
		else
		begin

			else
			begin
				info_Group_info_register_GUID <= info_Group_info_register_GUID_next;
			end
		end
	end

	/* register GPR_0 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_0_GPF <= 64'h0;
			GPR_Group_GPR_0_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 32) && write_en)
			begin
				GPR_Group_GPR_0_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_0_GPF_wen)
			begin
				GPR_Group_GPR_0_GPF <= GPR_Group_GPR_0_GPF_next;
			end
			if((address[12:3]== 32) && write_en)
			begin
				GPR_Group_GPR_0_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_0_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_1 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_1_GPF <= 64'h0;
			GPR_Group_GPR_1_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 33) && write_en)
			begin
				GPR_Group_GPR_1_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_1_GPF_wen)
			begin
				GPR_Group_GPR_1_GPF <= GPR_Group_GPR_1_GPF_next;
			end
			if((address[12:3]== 33) && write_en)
			begin
				GPR_Group_GPR_1_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_1_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_2 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_2_GPF <= 64'h0;
			GPR_Group_GPR_2_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 34) && write_en)
			begin
				GPR_Group_GPR_2_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_2_GPF_wen)
			begin
				GPR_Group_GPR_2_GPF <= GPR_Group_GPR_2_GPF_next;
			end
			if((address[12:3]== 34) && write_en)
			begin
				GPR_Group_GPR_2_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_2_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_3 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_3_GPF <= 64'h0;
			GPR_Group_GPR_3_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 35) && write_en)
			begin
				GPR_Group_GPR_3_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_3_GPF_wen)
			begin
				GPR_Group_GPR_3_GPF <= GPR_Group_GPR_3_GPF_next;
			end
			if((address[12:3]== 35) && write_en)
			begin
				GPR_Group_GPR_3_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_3_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_4 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_4_GPF <= 64'h0;
			GPR_Group_GPR_4_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 36) && write_en)
			begin
				GPR_Group_GPR_4_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_4_GPF_wen)
			begin
				GPR_Group_GPR_4_GPF <= GPR_Group_GPR_4_GPF_next;
			end
			if((address[12:3]== 36) && write_en)
			begin
				GPR_Group_GPR_4_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_4_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_5 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_5_GPF <= 64'h0;
			GPR_Group_GPR_5_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 37) && write_en)
			begin
				GPR_Group_GPR_5_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_5_GPF_wen)
			begin
				GPR_Group_GPR_5_GPF <= GPR_Group_GPR_5_GPF_next;
			end
			if((address[12:3]== 37) && write_en)
			begin
				GPR_Group_GPR_5_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_5_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_6 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_6_GPF <= 64'h0;
			GPR_Group_GPR_6_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 38) && write_en)
			begin
				GPR_Group_GPR_6_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_6_GPF_wen)
			begin
				GPR_Group_GPR_6_GPF <= GPR_Group_GPR_6_GPF_next;
			end
			if((address[12:3]== 38) && write_en)
			begin
				GPR_Group_GPR_6_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_6_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_7 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_7_GPF <= 64'h0;
			GPR_Group_GPR_7_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 39) && write_en)
			begin
				GPR_Group_GPR_7_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_7_GPF_wen)
			begin
				GPR_Group_GPR_7_GPF <= GPR_Group_GPR_7_GPF_next;
			end
			if((address[12:3]== 39) && write_en)
			begin
				GPR_Group_GPR_7_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_7_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_8 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_8_GPF <= 64'h0;
			GPR_Group_GPR_8_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 40) && write_en)
			begin
				GPR_Group_GPR_8_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_8_GPF_wen)
			begin
				GPR_Group_GPR_8_GPF <= GPR_Group_GPR_8_GPF_next;
			end
			if((address[12:3]== 40) && write_en)
			begin
				GPR_Group_GPR_8_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_8_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_9 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_9_GPF <= 64'h0;
			GPR_Group_GPR_9_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 41) && write_en)
			begin
				GPR_Group_GPR_9_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_9_GPF_wen)
			begin
				GPR_Group_GPR_9_GPF <= GPR_Group_GPR_9_GPF_next;
			end
			if((address[12:3]== 41) && write_en)
			begin
				GPR_Group_GPR_9_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_9_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_10 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_10_GPF <= 64'h0;
			GPR_Group_GPR_10_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 42) && write_en)
			begin
				GPR_Group_GPR_10_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_10_GPF_wen)
			begin
				GPR_Group_GPR_10_GPF <= GPR_Group_GPR_10_GPF_next;
			end
			if((address[12:3]== 42) && write_en)
			begin
				GPR_Group_GPR_10_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_10_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_11 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_11_GPF <= 64'h0;
			GPR_Group_GPR_11_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 43) && write_en)
			begin
				GPR_Group_GPR_11_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_11_GPF_wen)
			begin
				GPR_Group_GPR_11_GPF <= GPR_Group_GPR_11_GPF_next;
			end
			if((address[12:3]== 43) && write_en)
			begin
				GPR_Group_GPR_11_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_11_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_12 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_12_GPF <= 64'h0;
			GPR_Group_GPR_12_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 44) && write_en)
			begin
				GPR_Group_GPR_12_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_12_GPF_wen)
			begin
				GPR_Group_GPR_12_GPF <= GPR_Group_GPR_12_GPF_next;
			end
			if((address[12:3]== 44) && write_en)
			begin
				GPR_Group_GPR_12_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_12_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_13 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_13_GPF <= 64'h0;
			GPR_Group_GPR_13_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 45) && write_en)
			begin
				GPR_Group_GPR_13_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_13_GPF_wen)
			begin
				GPR_Group_GPR_13_GPF <= GPR_Group_GPR_13_GPF_next;
			end
			if((address[12:3]== 45) && write_en)
			begin
				GPR_Group_GPR_13_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_13_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_14 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_14_GPF <= 64'h0;
			GPR_Group_GPR_14_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 46) && write_en)
			begin
				GPR_Group_GPR_14_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_14_GPF_wen)
			begin
				GPR_Group_GPR_14_GPF <= GPR_Group_GPR_14_GPF_next;
			end
			if((address[12:3]== 46) && write_en)
			begin
				GPR_Group_GPR_14_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_14_GPF_written <= 1'b0;
			end

		end
	end

	/* register GPR_15 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			GPR_Group_GPR_15_GPF <= 64'h0;
			GPR_Group_GPR_15_GPF_written <= 1'b0;
		end
		else
		begin

			if((address[12:3]== 47) && write_en)
			begin
				GPR_Group_GPR_15_GPF <= write_data[63:0];
			end
			else if(GPR_Group_GPR_15_GPF_wen)
			begin
				GPR_Group_GPR_15_GPF <= GPR_Group_GPR_15_GPF_next;
			end
			if((address[12:3]== 47) && write_en)
			begin
				GPR_Group_GPR_15_GPF_written <= 1'b1;
			end
			else
			begin
				GPR_Group_GPR_15_GPF_written <= 1'b0;
			end

		end
	end

	/* RamBlock RAM_Group_RAM */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			`ifdef ASIC
			RAM_Group_RAM_rf_addr <= 8'b0;
			RAM_Group_RAM_rf_wdata  <= 16'b0;
			`endif
			RAM_Group_RAM_rf_wen <= 1'b0;
			RAM_Group_RAM_rf_ren <= 1'b0;
		end
		else
		begin
			if (address[12:11] == 1)
			begin
				RAM_Group_RAM_rf_addr <= address[10:3];
				RAM_Group_RAM_rf_wdata <= write_data[15:0];
				RAM_Group_RAM_rf_wen <= write_en;
				RAM_Group_RAM_rf_ren <= read_en;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif

			read_en_dly0 <= 1'b0;
			read_en_dly1 <= 1'b0;
			read_en_dly2 <= 1'b0;
		end
		else
		begin
			read_en_dly0 <= read_en;
			read_en_dly1 <= read_en_dly0;
			read_en_dly2 <= read_en_dly1;

			casex(address[12:3])
				10'h0:
				begin
					read_data[31:0] <= info_Group_info_register_ID;
					read_data[63:32] <= info_Group_info_register_GUID;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h20:
				begin
					read_data[63:0] <= GPR_Group_GPR_0_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h21:
				begin
					read_data[63:0] <= GPR_Group_GPR_1_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h22:
				begin
					read_data[63:0] <= GPR_Group_GPR_2_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h23:
				begin
					read_data[63:0] <= GPR_Group_GPR_3_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h24:
				begin
					read_data[63:0] <= GPR_Group_GPR_4_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h25:
				begin
					read_data[63:0] <= GPR_Group_GPR_5_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h26:
				begin
					read_data[63:0] <= GPR_Group_GPR_6_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h27:
				begin
					read_data[63:0] <= GPR_Group_GPR_7_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h28:
				begin
					read_data[63:0] <= GPR_Group_GPR_8_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h29:
				begin
					read_data[63:0] <= GPR_Group_GPR_9_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2a:
				begin
					read_data[63:0] <= GPR_Group_GPR_10_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2b:
				begin
					read_data[63:0] <= GPR_Group_GPR_11_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2c:
				begin
					read_data[63:0] <= GPR_Group_GPR_12_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2d:
				begin
					read_data[63:0] <= GPR_Group_GPR_13_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2e:
				begin
					read_data[63:0] <= GPR_Group_GPR_14_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				10'h2f:
				begin
					read_data[63:0] <= GPR_Group_GPR_15_GPF;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				{2'h1,9'bxxxxxxxx}:
				begin
					read_data[15:0] <= RAM_Group_RAM_rf_rdata;
					read_data[63:16] <= 48'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en_dly2;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule