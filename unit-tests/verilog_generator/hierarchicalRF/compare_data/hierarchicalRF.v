

/* auto generated by RFG */
/* address map
SimpleRF: base: 0x0 size: 24
G2_r1: base: 0x20 size: 8
G3_r2: base: 0x28 size: 8

*/
/* instantiation template
hierarchicalRF hierarchicalRF_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.SimpleRF_address(),
	.SimpleRF_read_data(),
	.SimpleRF_invalid_address(),
	.SimpleRF_access_complete(),
	.SimpleRF_read_en(),
	.SimpleRF_write_en(),
	.SimpleRF_write_data(),
	.SimpleRF_info_rf_node_id(),
	.SimpleRF_info_rf_node_guid_next(),
	.SimpleRF_info_rf_r1_r1_1_next(),
	.SimpleRF_info_rf_r1_r1_1(),
	.SimpleRF_info_rf_r1_r1_2_next(),
	.SimpleRF_info_rf_r1_r1_2(),
	.SimpleRF_info_rf_r1_r1_2_written(),
	.SimpleRF_info_rf_r1_r1_3_next(),
	.SimpleRF_info_rf_r1_r1_3(),
	.SimpleRF_info_rf_r1_r1_3_written(),
	.SimpleRF_info_rf_r1_r1_4_next(),
	.SimpleRF_info_rf_r1_r1_4(),
	.SimpleRF_info_rf_r1_r1_4_wen()
	.G2_r1_f1_next(),
	.G2_r1_f1(),
	.G3_r2_f1_next(),
	.G3_r2_f1()
);
*/
module hierarchicalRF
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[5:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@ 
	output reg[4:3] SimpleRF_address,
	input wire[63:0] SimpleRF_read_data(),
	input wire SimpleRF_invalid_address,
	input wire SimpleRF_access_complete(),
	output reg SimpleRF_read_en(),
	output reg SimpleRF_write_en(),
	output reg[63:0] SimpleRF_write_data(),
	output reg[15:0] SimpleRF_info_rf_node_id,
	input wire[23:0] SimpleRF_info_rf_node_guid_next,
	input wire[15:0] SimpleRF_info_rf_r1_r1_1_next,
	output reg[15:0] SimpleRF_info_rf_r1_r1_1,
	input wire[15:0] SimpleRF_info_rf_r1_r1_2_next,
	output reg[15:0] SimpleRF_info_rf_r1_r1_2,
	output reg SimpleRF_info_rf_r1_r1_2_written,
	input wire[15:0] SimpleRF_info_rf_r1_r1_3_next,
	output reg[15:0] SimpleRF_info_rf_r1_r1_3,
	output reg SimpleRF_info_rf_r1_r1_3_written,
	input wire[15:0] SimpleRF_info_rf_r1_r1_4_next,
	output reg[15:0] SimpleRF_info_rf_r1_r1_4,
	input wire SimpleRF_info_rf_r1_r1_4_wen
	input wire[63:0] G2_r1_f1_next,
	output reg[63:0] G2_r1_f1,
	input wire[63:0] G3_r2_f1_next,
	output reg[63:0] G3_r2_f1

);



	/* RegisterFile SimpleRF*/
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
	if (!res_n)
	begin
		SimpleRF_write_en <= 1'b0;
		SimpleRF_read_en  <= 1'b0;
		`ifdef ASIC
		SimpleRF_write_data <= 64'b0;
		SimpleRF_address  <= 4'b0;
		`endif
	end
	else
	begin
		if(address[6:5] == 2'h0)
		begin
			SimpleRF_address <= address[5:3];
		end
		if( (address[6:5] == 2'h0) && write_en)
		begin
			SimpleRF_write_data <= write_data[63:0];
			SimpleRF_write_en <= 1'b1;
		end
		else
		begin
			SimpleRF_write_en <= 1'b0;
		end
		if( (address[6:5] == 2'h0) && read_en)
		begin
			SimpleRF_read_en <= 1'b1;
		end
		else
		begin
			SimpleRF_read_en <= 1'b0;
		end
	
	/* register r1 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			G2_r1_f1 <= 0;
		end
		else
		begin

			if((address[5:3]== 4) && write_en)
			begin
				G2_r1_f1 <= write_data[63:0];
			end
			else
			begin
				G2_r1_f1 <= G2_r1_f1_next;
			end
		end
	end

	/* register r2 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			G3_r2_f1 <= 0;
		end
		else
		begin

			if((address[5:3]== 5) && write_en)
			begin
				G3_r2_f1 <= write_data[63:0];
			end
			else
			begin
				G3_r2_f1 <= G3_r2_f1_next;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif

		end
		else
		begin

			casex(address[5:3])
				3'h4:
				begin
					read_data[63:0] <= G2_r1_f1;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				3'h5:
				begin
					read_data[63:0] <= G3_r2_f1;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule