

/* auto generated by RFG */
/* address map
G2_r1: base: 0x56 size: 8
G3_r2: base: 0x64 size: 8
G1_SimpleRF_info_rf_driver: base: 0x32 size: 8
G1_SimpleRF_info_rf_node: base: 0x40 size: 8
G1_SimpleRF_info_rf_r1: base: 0x48 size: 8

*/
/* instantiation template
hierarchicalRF hierarchicalRF_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.G1_SimpleRF_info_rf_node_id(),
	.G1_SimpleRF_info_rf_node_guid_next(),
	.G1_SimpleRF_info_rf_r1_r1_1_next(),
	.G1_SimpleRF_info_rf_r1_r1_1(),
	.G1_SimpleRF_info_rf_r1_r1_2_next(),
	.G1_SimpleRF_info_rf_r1_r1_2(),
	.G1_SimpleRF_info_rf_r1_r1_2_written(),
	.G1_SimpleRF_info_rf_r1_r1_3_next(),
	.G1_SimpleRF_info_rf_r1_r1_3(),
	.G1_SimpleRF_info_rf_r1_r1_3_written(),
	.G1_SimpleRF_info_rf_r1_r1_4_next(),
	.G1_SimpleRF_info_rf_r1_r1_4(),
	.G1_SimpleRF_info_rf_r1_r1_4_wen()
);
*/
module hierarchicalRF
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[6:3] address,
	output reg[63:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[63:0] write_data,
	///}@ 
	output reg[15:0] G1_SimpleRF_info_rf_node_id,
	input wire[23:0] G1_SimpleRF_info_rf_node_guid_next,
	input wire[15:0] G1_SimpleRF_info_rf_r1_r1_1_next,
	output reg[15:0] G1_SimpleRF_info_rf_r1_r1_1,
	input wire[15:0] G1_SimpleRF_info_rf_r1_r1_2_next,
	output reg[15:0] G1_SimpleRF_info_rf_r1_r1_2,
	output reg G1_SimpleRF_info_rf_r1_r1_2_written,
	input wire[15:0] G1_SimpleRF_info_rf_r1_r1_3_next,
	output reg[15:0] G1_SimpleRF_info_rf_r1_r1_3,
	output reg G1_SimpleRF_info_rf_r1_r1_3_written,
	input wire[15:0] G1_SimpleRF_info_rf_r1_r1_4_next,
	output reg[15:0] G1_SimpleRF_info_rf_r1_r1_4,
	input wire G1_SimpleRF_info_rf_r1_r1_4_wen

);

	reg[31:0] G1_SimpleRF_info_rf_driver_version;
	reg[23:0] G1_SimpleRF_info_rf_node_guid;
	reg[15:0] G1_SimpleRF_info_rf_node_vpids;
	reg G1_SimpleRF_info_rf_r1_r1_3_res_in_last_cycle;


	/* register r1 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
		end
		else
		begin

		end
	end

	/* register r2 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
		end
		else
		begin

		end
	end

	/* register driver */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			G1_SimpleRF_info_rf_driver_version <= 32'h12abcd;
		end
		else
		begin

		end
	end

	/* register node */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			G1_SimpleRF_info_rf_node_id <= 0;
			G1_SimpleRF_info_rf_node_guid <= 24'h12abcd;
			G1_SimpleRF_info_rf_node_vpids <= 0;
		end
		else
		begin

			if((address[6:3]== 5) && write_en)
			begin
				G1_SimpleRF_info_rf_node_id <= write_data[15:0];
			end
				G1_SimpleRF_info_rf_node_guid <= G1_SimpleRF_info_rf_node_guid_next;
		end
	end

	/* register r1 */
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			G1_SimpleRF_info_rf_r1_r1_1 <= 0;
			G1_SimpleRF_info_rf_r1_r1_2 <= 0;
			G1_SimpleRF_info_rf_r1_r1_2_written <= 1'b0;
			G1_SimpleRF_info_rf_r1_r1_3 <= 0;
			G1_SimpleRF_info_rf_r1_r1_3_written <= 1'b0;
			G1_SimpleRF_info_rf_r1_r1_3_res_in_last_cycle <= 1'b1;
			G1_SimpleRF_info_rf_r1_r1_4 <= 0;
		end
		else
		begin

			if((address[6:3]== 6) && write_en)
			begin
				G1_SimpleRF_info_rf_r1_r1_1 <= write_data[15:0];
			end
			else
			begin
				G1_SimpleRF_info_rf_r1_r1_1 <= G1_SimpleRF_info_rf_r1_r1_1_next;
			end
			if((address[6:3]== 6) && write_en)
			begin
				G1_SimpleRF_info_rf_r1_r1_2 <= write_data[31:16];
			end
			else
			begin
				G1_SimpleRF_info_rf_r1_r1_2 <= G1_SimpleRF_info_rf_r1_r1_2_next;
			end
			if((address[6:3]== 6) && write_en)
			begin
				G1_SimpleRF_info_rf_r1_r1_2_written <= 1'b1;
			end
			else
			begin
				G1_SimpleRF_info_rf_r1_r1_2_written <= 1'b0;
			end

			if((address[6:3]== 6) && write_en)
			begin
				G1_SimpleRF_info_rf_r1_r1_3 <= write_data[47:32];
			end
			else
			begin
				G1_SimpleRF_info_rf_r1_r1_3 <= G1_SimpleRF_info_rf_r1_r1_3_next;
			end
			if(((address[6:3]== 6) && write_en) || G1_SimpleRF_info_rf_r1_r1_3_res_in_last_cycle)
			begin
				G1_SimpleRF_info_rf_r1_r1_3_written <= 1'b1;
				G1_SimpleRF_info_rf_r1_r1_3_res_in_last_cycle <= 1'b0;
			end
			else
			begin
				G1_SimpleRF_info_rf_r1_r1_3_written <= 1'b0;
			end

			if((address[6:3]== 6) && write_en)
			begin
				G1_SimpleRF_info_rf_r1_r1_4 <= write_data[63:48];
			end
			else if(G1_SimpleRF_info_rf_r1_r1_4_wen)
			begin
				G1_SimpleRF_info_rf_r1_r1_4 <= G1_SimpleRF_info_rf_r1_r1_4_next;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 64'b0;
			`endif

		end
		else
		begin

			casex(address[6:3])
				4'h7:
				begin
					read_data[63:0] <= 64'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				4'h8:
				begin
					read_data[63:0] <= 64'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				4'h4:
				begin
					read_data[31:0] <= G1_SimpleRF_info_rf_driver_version;
					read_data[63:32] <= 32'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				4'h5:
				begin
					read_data[15:0] <= G1_SimpleRF_info_rf_node_id;
					read_data[39:16] <= G1_SimpleRF_info_rf_node_guid;
					read_data[55:40] <= G1_SimpleRF_info_rf_node_vpids;
					read_data[63:56] <= 8'b0;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				4'h6:
				begin
					read_data[15:0] <= G1_SimpleRF_info_rf_r1_r1_1;
					read_data[31:16] <= G1_SimpleRF_info_rf_r1_r1_2;
					read_data[47:32] <= G1_SimpleRF_info_rf_r1_r1_3;
					read_data[63:48] <= G1_SimpleRF_info_rf_r1_r1_4;
					invalid_address <= 1'b0;
					access_complete <= write_en || read_en;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule