

/* auto generated by RFG */
/* address map
Example1: base: 0x0 size: 2176
Example2: base: 0x1000 size: 2176

*/
/* instantiation template
test test_I (
	.res_n(),
	.clk(),
	.address(),
	.read_data(),
	.invalid_address(),
	.access_complete(),
	.read_en(),
	.write_en(),
	.write_data(),
	.Example1_address(),
	.Example1_read_data(),
	.Example1_invalid_address(),
	.Example1_access_complete(),
	.Example1_read_en(),
	.Example1_write_en(),
	.Example1_write_data(),
	.Example2_address(),
	.Example2_read_data(),
	.Example2_invalid_address(),
	.Example2_access_complete(),
	.Example2_read_en(),
	.Example2_write_en(),
	.Example2_write_data()
);
*/
module test
(
	///\defgroup sys
	///@{ 
	input wire res_n,
	input wire clk,
	///}@ 
	///\defgroup rw_if
	///@{ 
	input wire[12:3] address,
	output reg[31:0] read_data,
	output reg invalid_address,
	output reg access_complete,
	input wire read_en,
	input wire write_en,
	input wire[31:0] write_data,
	///}@ 
	output reg[11:3] Example1_address,
	input wire[31:0] Example1_read_data,
	input wire Example1_invalid_address,
	input wire Example1_access_complete,
	output reg Example1_read_en,
	output reg Example1_write_en,
	output reg[31:0] Example1_write_data,
	output reg[11:3] Example2_address,
	input wire[31:0] Example2_read_data,
	input wire Example2_invalid_address,
	input wire Example2_access_complete,
	output reg Example2_read_en,
	output reg Example2_write_en,
	output reg[31:0] Example2_write_data

);



	/* RegisterFile Example1*/
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			Example1_write_en <= 1'b0;
			Example1_read_en  <= 1'b0;
			`ifdef ASIC
			Example1_write_data <= 64'b0;
			Example1_address  <= 11'b0;
			`endif
		end
		else
		begin
			if(address[12:12] == 1'h0)
			begin
				Example1_address <= address[11:3];
			end
			if( (address[12:12] == 1'h0) && write_en)
			begin
				Example1_write_data <= write_data[63:0];
				Example1_write_en <= 1'b1;
			end
			else
			begin
				Example1_write_en <= 1'b0;
			end
			if( (address[12:12] == 1'h0) && read_en)
			begin
				Example1_read_en <= 1'b1;
			end
			else
			begin
				Example1_read_en <= 1'b0;
			end
		end
	end

	/* RegisterFile Example2*/
	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			Example2_write_en <= 1'b0;
			Example2_read_en  <= 1'b0;
			`ifdef ASIC
			Example2_write_data <= 64'b0;
			Example2_address  <= 11'b0;
			`endif
		end
		else
		begin
			if(address[12:12] == 1'h1)
			begin
				Example2_address <= address[11:3];
			end
			if( (address[12:12] == 1'h1) && write_en)
			begin
				Example2_write_data <= write_data[63:0];
				Example2_write_en <= 1'b1;
			end
			else
			begin
				Example2_write_en <= 1'b0;
			end
			if( (address[12:12] == 1'h1) && read_en)
			begin
				Example2_read_en <= 1'b1;
			end
			else
			begin
				Example2_read_en <= 1'b0;
			end
		end
	end


	`ifdef ASYNC_RES
	always @(posedge clk or negedge res_n) `else
	always @(posedge clk) `endif
	begin
		if (!res_n)
		begin
			invalid_address <= 1'b0;
			access_complete <= 1'b0;
			`ifdef ASIC
			read_data   <= 32'b0;
			`endif

		end
		else
		begin

			casex(address[12:3])
				{1'h0,9'bxxxxxxxxx}:
				begin
					read_data <= Example1_read_data;
					invalid_address <= Example1_invalid_address;
					access_complete <= Example1_access_complete;
				end
				{1'h1,9'bxxxxxxxxx}:
				begin
					read_data <= Example2_read_data;
					invalid_address <= Example2_invalid_address;
					access_complete <= Example2_access_complete;
				end
				default:
				begin
					invalid_address <= read_en || write_en;
					access_complete <= read_en || write_en;
				end		
			endcase
		end
	end
endmodule